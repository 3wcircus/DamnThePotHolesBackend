<% layout('layout') -%>
<!--THIS REPLACES THE PUG GOOGLE MAPS IMPLEMENTATION-->
<!-- FIXME: CSS STILL BROKEN, MAP DOES NOT USE FULL VERTICAL DISPLAY AREA-->

<h1 class="dtp-title">All Pothole Hits</h1>

<!--/*************************************************************************-->
<!--*  AGE FILTERING-->
<!--*-->
<!--************************************************************************/-->
<!--// Aged hits filter control-->
<!--<p>-->
<!--    <label for="select_time">Sort reports by the last: </label>-->

<!--    <select id="select_time">-->
<!--        <option>pick a time</option>-->
<!--        <option value="/dtp">all time</option>-->
<!--        <option value="/dtp/1">day</option>-->
<!--        <option value="/dtp/7">7 days</option>-->
<!--        <option value="/dtp/30">month (30 days)</option>-->
<!--        <option value="/dtp/60">2 months</option>-->
<!--        <option value="/dtp/90">3 months</option>-->
<!--        <option value="/dtp/180">6 months</option>-->
<!--        <option value="/dtp/270">9 months</option>-->
<!--        <option value="/dtp/365">year</option>-->
<!--    </select>-->
<!--</p>-->
<script>
let filterChanged = (evt) => {
    console.log(`Filter ${evt.target.value}`);
}

</script>
<div class="dropdown dtp_filter">
    <a class="btn btn-secondary dropdown-toggle" href="#" role="button" id="dropdownMenuLink" data-toggle="dropdown" aria-haspopup="true" aria-expanded="false">
        Filter by Age
    </a>

    <div class="dropdown-menu" aria-labelledby="dropdownMenuLink" onchange="filterChanged">
        <a class="dropdown-item" href="/dtp">All Active Hits</a>
        <a class="dropdown-item" href="/dtp/1">Today</a>
        <a class="dropdown-item" href="/dtp/7">1 week</a>
        <a class="dropdown-item" href="/dtp/14">2 weeks</a>
        <a class="dropdown-item" href="/dtp/30">1 Month</a>
        <a class="dropdown-item" href="/dtp/90">3 Months</a>
        <a class="dropdown-item" href="/dtp/180">6 Months</a>
        <a class="dropdown-item" href="/dtp/270">9 Months</a>
        <a class="dropdown-item" href="/dtp/365">1 Year</a>
    </div>
<!--    <span id="current-filter-text">All Active Hits</span>-->
</div>
<!--/*************************************************************************-->
<!--*  AGE FILTERING-->
<!--*-->
<!--************************************************************************/-->
<div id='map'></div>
<!--        // Aged hits-->
<!--The entire content of this section comes from MapBox javascript-->
<!--TODO: Can I pull this out into separate file?-->
<script>
    // document.getElementById("select_time").onchange = function ()
    // {
    //     if (this.selectedIndex !== 0)
    //     {
    //         window.location.href = this.value;
    //     }
    // };

    mapboxgl.accessToken = 'pk.eyJ1Ijoia3lhbmN5IiwiYSI6ImNqeDRuaGI2ZDBiank0NGtqZTRrb2VoaGQifQ.j1Ap9ucUmQy0_7FGOh8fVA';
    var map = new mapboxgl.Map({
        container: 'map',
        // TODO: Make it so we can flip between styles on the fly from main page
        // style: 'mapbox://styles/mapbox/dark-v10',
        style: 'mapbox://styles/mapbox/streets-v11',
        center: [-89.9517577, 35.1480818], // FIXME: starting position should be based on user/browser location
        zoom: 10
    });

    //************************************************************************************
    //Added the option for the user to select the gps button in top right hand corner to zoom to current location.
    map.addControl(
        new mapboxgl.GeolocateControl({
            positionOptions: {
                enableHighAccuracy: true
            },
            trackUserLocation: false
        })
    );



    // When map finishes setting up, load the injected list of hits and build/populate map
    map.on('load', function ()
    {
        console.log("Head " + '<%= title %>');

        map.addSource("potholes", {
            type: "geojson",
            data: {"type": "FeatureCollection", "features": [<%- pot_holes %>]},
            cluster: true,
            clusterMaxZoom: 14, // Max zoom to cluster points on
            clusterRadius: 50 // Radius of each cluster when clustering points (defaults to 50)
        });

        // Add highest level grouping (red)
        map.addLayer({
            id: "clusters",
            type: "circle",
            source: "potholes",
            filter: ["has", "point_count"],
            paint: {
                // Use step expressions (https://docs.mapbox.com/mapbox-gl-js/style-spec/#expressions-step)
                // with three steps to implement three types of circles:
                //   * Blue, 20px circles when point count is less than 100
                //   * Yellow, 30px circles when point count is between 100 and 750
                //   * Pink, 40px circles when point count is greater than or equal to 750
                // TODO: Implement additional steps
                "circle-color": [
                    "step",
                    ["get", "point_count"],
                    "#2857f1",
                    100,
                    "#d6d22c",
                    500,
                    "#f28cb1"
                ],

                // 'circle-radius': [{
                //     'base': 1.75,
                //     'stops': [[12, 2], [22, 180]]
                // }
                // FIXME: Old version that works
                "circle-radius": [
                    "step",
                    ["get", "point_count"],
                    20,
                    100,
                    30,
                    500,
                    40
                ]
            }
        });

        //
        // TODO: Fix Blue circle scale
        map.addLayer({
            id: "cluster-count",
            type: "symbol",
            source: "potholes",
            filter: ["has", "point_count"],
            layout: {
                "text-field": "{point_count_abbreviated}", // The count of hits in the group circle
                "text-font": ["DIN Offc Pro Medium", "Arial Unicode MS Bold"],
                "text-size": 12 // Text font for all numbers on cluster circles
            }
        });

        // The individual hit icon
        map.addLayer({
            id: "unclustered-point",
            type: "circle",
            source: "potholes",
            filter: ["!", ["has", "point_count"]],
            // FIXME Playing with colors. Clean this up
            paint: {
                // "circle-color": "#da1039",
                "circle-color": [
                    'match',
                    ['get', 'marker'],
                    0, '#dc143c',
                    60, '#dee12e',
                    240, '#1945ff',
                    /* other */ '#ccc'
                ],
                "circle-radius": 6
                // ,
                // "circle-stroke-width": .5,
                // "circle-stroke-color": "#fff"
            }
        });

        // inspect a cluster on click
        map.on('click', 'clusters', function (e)
        {
            const features = map.queryRenderedFeatures(e.point, {layers: ['clusters']});
            const clusterId = features[0].properties.cluster_id;
            map.getSource('potholes').getClusterExpansionZoom(clusterId, function (err, zoom)
            {
                if (err)
                {
                    return;
                }

                map.easeTo({
                    center: features[0].geometry.coordinates,
                    zoom: zoom
                });
            });
        });
        // Create a popup, but don't add it to the map yet.
        let popup = new mapboxgl.Popup({
            closeButton: false,
            closeOnClick: false
        });

        map.on('mouseenter', 'unclustered-point', function (e)
        {
// Change the cursor style as a UI indicator.
            map.getCanvas().style.cursor = 'pointer';

            console.log(`
            Feature 0:
            ${e.features[0].properties.date}
            ${e.features[0].geometry.coordinates.slice()}
            `)
            const coordinates = e.features[0].geometry.coordinates.slice();
            const description = e.features[0].properties.date;
            const user = e.features[0].properties.userTag;
// Ensure that if the map is zoomed out such that multiple
// copies of the feature are visible, the popup appears
// over the copy being pointed to.
            while (Math.abs(e.lngLat.lng - coordinates[0]) > 180)
            {
                coordinates[0] += e.lngLat.lng > coordinates[0] ? 360 : -360;
            }

// Populate the popup and set its coordinates
// based on the feature found.
//
            popup.setLngLat(coordinates)
                .setText(
                    `${description}
                     ${coordinates}
                     ${e.features[0].properties.x} ${e.features[0].properties.y} ${e.features[0].properties.z}
                     ${e.features[0].properties.lastx} ${e.features[0].properties.lasty} ${e.features[0].properties.lastz}
                     ${user}
                `)
                .addTo(map);
        });

        map.on('mouseleave', 'unclustered-point', function ()
        {
            map.getCanvas().style.cursor = '';
            popup.remove();
        });
        map.resize();
    });

</script>

