#!/usr/bin/env node

/**
 * Module dependencies.
 */
const app = require('../app');
const debug = require('debug')('damnthepotholesbackend:server');
const http = require('http');
const log = require('simple-node-logger');
// create a rolling file logger based on date/time that fires process events
const logger_opts = {
  errorEventName:'error',
  logDirectory:'./logs', // NOTE: folder must exist and be writable...
  fileNamePattern:'dtp-<DATE>.log',
  dateFormat:'YYYY.MM.DD'
};
const logger = log.createRollingFileLogger(logger_opts);

/**
 * Get port from environment and store in Express.
 */
// console.log("Opening port..."+ process.env.PORT || '3000');
const port = normalizePort(process.env.PORT || '3000');
app.set('port', port);

// console.log(`Listening on port ${port}...`);

/**
 * Create HTTP server.
 */
const server = http.createServer(app);

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  const port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    logger.error('Exception starting listener! ',error);
    throw error;
  }

  const bind = typeof port === 'string'
      ? 'Pipe ' + port
      : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      logger.error(bind,' requires elevated privileges');
      // console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      logger.error(bind,' is already in use');
      // console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  const addr = server.address();
  const bind = typeof addr === 'string'
      ? 'pipe ' + addr
      : 'port ' + addr.port;
  logger.info('Listening on ',bind,'...');
}
